// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc364;

import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc364.commands.*;
import org.usfirst.frc364.subsystems.*;

public class Robot extends IterativeRobot {

    Command autonomousCommand;

    public static OI oi;
    
    public static Drivesystem drivesystem;
    public static intakeSystem intakeSystem;
    public static liftSystem liftSystem;;
    public static canSystem canSystem;
    public static shiftSystem shiftSystem;
    public static armSystem armSystem;

    public void robotInit() {
    RobotMap.init();

        drivesystem = new Drivesystem();
        intakeSystem = new intakeSystem();
        liftSystem = new liftSystem();
        canSystem = new canSystem();
        shiftSystem = new shiftSystem();
        armSystem = new armSystem();
        
        oi = new OI();
        
        autonomousCommand = new autonomous();
    }

    public void disabledInit(){

    }

    public void disabledPeriodic() {
    	SmartDashboard.putNumber("position", Robot.liftSystem.getPosition());
        Scheduler.getInstance().run();
    }

    public void autonomousInit() {
        if (autonomousCommand != null) autonomousCommand.start();
    }

    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    public void teleopInit() {
        if (autonomousCommand != null) autonomousCommand.cancel();
    }
    
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
    }

    public void testPeriodic() {
        LiveWindow.run();
    }
}
